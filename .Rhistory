class(x)
y <- c("a", "b", NA, "d", NA, "f")
class(y)
good <- complete.cases(x,y)
good
x[good]
y[good]
airquality
airquality[1:6, ]
good <- complete.cases(airquality)
good
airquality[good, ][1:6,]
airquality[1:6, ]
good <- complete.cases(airquality)
good
airquality[good, ][1:6]
airquality[good, ][1:6,]
if(x>3) {
y <-10}
if(x>3) {
y <-10 }
for (i in 1:10) {
print(i) }
x <- c("a", "b", "c", "d")
x
for (i in 1:4) {
print(x[i]) }
for(i in seq_along(x)) {
print(x[i]) }
for(letter in x){
print(letter)
}
for (i in 1:3) print(x[i])
x <- matrix(1:6, 2,3)
x
for (i in seq_len(nrow(x)) {
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j]) } }
count <- 0
while (count<0) {
print(count)
count <- count+1 }
while (count<10) {
print(count)
count <- count+1 }
z <- 5
while (z>=3 && z <=10) {
print(z)
coin<-rbinom(1,1,0.5)
if(coin=1) {
coin<-rbinom(1,1,0.5)
coin
coin
coin
coin
coin<-rbinom(1,0,0.5)
coin
coin
coin
coin
coin
coin
coin
help(rbinom)
z<-5
while(z>=3 && z<=10) {
print(z)
coin<- rbinom(1,1,0.5)
if(coin==1)
z<-z+1
else{
z<-z-1
}
{}
}
x0 <- 1
tol <- 1e-8
tol
repeat {
x1 <- computeEstimate()
if(abs(x1-x0)<tol){
break}
else {
x0 <- x1
}
}
help(computeEstimate)
p <- matrix(1:16, nrow=4)
p
apply(p, 1, min)
apply(p, 1, min)
apply(p, 1, max)
apply(p, 2, min)
apply(p, c(1,2), sum)
x <- list(a=1, b=1:3, c=10:100)
x
lapply(x, FUN=length)
lapply(x, FUN=sum)
x <- list(a=1, b=1:3, c=10:100)
sapply(x, FUN=sum)
sapply(x, FUN=length)
help(rnorm)
d
mydata <- rnorm(100)
mtdata
mydata
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm=FALSE)
args(lm)
search()
read.csv("C:\\Users\\6217473\\Desktop\\rprog_data_specdata\\specdata\\332.csv", sep=",")
read.csv("C:\\Users\\6217473\\Desktop\\rprog_data_specdata\\specdata\\332.csv", sep=",")
good <- complete.cases(data1)
h1 <- read.csv("C:\\Users\\6217473\\Desktop\\rprog_data_specdata\\specdata\\332.csv", sep=",")
good <- complete.cases(h1)
good
h2 <- h1[good,]
h2
mean(h2)
mean(h2$sulfate)
mean(h2$nitrate)
pollutantmean <- function (directory, pollutant, id=1:332) {
for(i in id) {
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
names(h)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
head(airquality)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month=factor(Month))
head(airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)" )
par("lty")
par("col")
x <- rnorm(100)
hist(x)
y <- rnrom(1000)
y <- rnorm(1000)
plot(x,y)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x,z)
par(mar=c(2,2,2,))
plot(x,z)
par(mar=c(2,2,2,2))
plot(x,z)
par(mar=c(4,4,2,2))
plot(x,z)
plot(x,y,pch=20)
plot(x,y,pch=19)
plot(x,y,pch=2)
plot(x,y,pch=3)
example(points)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y,pch=20)
title("ScatterPlot")
text(-2,-2, "Label")
legend("topleft", legend="Data", pch=20)
fit <- lm(y~x)
abline(fit)
ablind(fit, lwd=3)
ablind(fit, lwd=3)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
plot(x,y, xlab="weight", ylab="Height", main="ScatterPlot", pch=20)
legend("toright", "data", pch=20)
legend("toright", legend="data", pch=20)
legend("topright", legend="data", pch=20)
par(mfrow=c(2,2))
plot(x,y)
y <- x + rnorm(100)
help(gl)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
f
y <- x+f -f*x + rnornm(100, sd=0.5)
y <- x+f -f*x + rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group 1", "Group 2"))
f
xyplot(y ~ x | f, layout=c(2,1))
install.packages("lattice")
library(lattice)
xyplot(y ~ x | f, layout=c(2,1))
xyplot(y ~ x | f, panel=function(x,y, ...) {
panel.xyplot(x,y, ...)
panel.abline(h=median(y), lty=2)
})
xyplot(y ~ x | f, layout=c(2,1))
xyplot(y ~ x | f, panel=function(x,y, ...) {
panel.xyplot(x,y, ...)
panel.abline(h=median(y), lty=2)
})
install.packages("ggplot2")
library(ggplot2)
str(mpg)
head(mpg)
qplot(displ, hwym data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color =drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplpt(displ, data=mpg, facets=drv~., binwidth=2)
str(maacs)
library(ggplot2)
str(maacs)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
str(maacs)
str(maacs)
str(maccs)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
x
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05,y+0.05, labels=as.character(1:12))
dataFrame <-data.frame(x=x, y=y)
dist(dataFrame)
distxy <- dist(dataFrame
distxy <- dist(dataFrame)
distxy <- dist(dataFrame)
hClusering <- hclust(distxy)
plot(hClustering)
plot(hClusering)
set.seed(143)
dataFrame <-data.frame(x=x, y=y)
set.seed(143)
dataMatrix <- as.Matrix(dataFrame)[sample(1:12),]
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
heatmap(dataMatrix)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05,y+0.05, labels=as.character(1:12))
dataFrame <-data.frame(x=x, y=y)
kmeansOjb <- kmeans(dataFrame, centers=3)
names(kmeansOjb)
kmeansOjb$cluster
par(mar=rep(0.2,4))
plot(x,y, col=kmeansOjb$cluster, pch=19, cex=2)
install.packages("knitr")
install.packages("data.table")
install.packages("ggplot2")
install.packages("aggregate")
install.packages("packages")
install.packages("read.csv")
rdata <- read.csv("C:/Users/6217473/Desktop/Coursera/data/activity.csv"",
header = TRUE, colClasses=c("numeric", "character", "numeric"))
rdata <- read.csv("C:/Users/6217473/Desktop/Coursera/data/activity.csv", sep=","
header = TRUE, colClasses=c("numeric", "character", "numeric"))
rdata <- read.csv("C:/Users/6217473/Desktop/Coursera/data/activity.csv", sep=","
header = TRUE, colClasses=c("numeric", "character", "numeric"))
rdata <- read.csv("C:/Users/6217473/Desktop/Coursera/data/activity.csv", sep=",",
header = TRUE, colClasses=c("numeric", "character", "numeric"))
weekdays_steps <- function(data) {
weekdays_steps <- aggregate(data$steps, by=list(interval = data$interval),
FUN=mean, na.rm=T)
# convert to integers for plotting
weekdays_steps$interval <-
as.integer(levels(weekdays_steps$interval)[weekdays_steps$interval])
colnames(weekdays_steps) <- c("interval", "steps")
weekdays_steps
}
data_by_weekdays <- function(data) {
data$weekday <-
as.factor(weekdays(data$date)) # weekdays
weekend_data <- subset(data, weekday %in% c("Saturday","Sunday"))
weekday_data <- subset(data, !weekday %in% c("Saturday","Sunday"))
weekend_steps <- weekdays_steps(weekend_data)
weekday_steps <- weekdays_steps(weekday_data)
weekend_steps$dayofweek <- rep("weekend", nrow(weekend_steps))
weekday_steps$dayofweek <- rep("weekday", nrow(weekday_steps))
data_by_weekdays <- rbind(weekend_steps, weekday_steps)
data_by_weekdays$dayofweek <- as.factor(data_by_weekdays$dayofweek)
data_by_weekdays
}
data_weekdays <- data_by_weekdays(rdata_fill)
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2) # we shall use ggplot2 for plotting figures
rdata <- read.csv("C:/Users/6217473/Desktop/Coursera/data/activity.csv", sep=",",
header = TRUE, colClasses=c("numeric", "character", "numeric"))
rdata$date <- as.Date(rdata$date, format = "%Y-%m-%d")
rdata$interval <- as.factor(rdata$interval)
steps_per_day <- aggregate(steps ~ date, rdata, sum)
colnames(steps_per_day) <- c("date","steps")
head(steps_per_day)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
steps_mean   <- mean(steps_per_day$steps, na.rm=TRUE)
steps_median <- median(steps_per_day$steps, na.rm=TRUE)
#calculate the aggregation of steps by intervals of 5-minutes and convert the intervals as integers and save them in a data frame called steps_per_interval.
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers, this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
```
```{r}
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
max_interval <- steps_per_interval[which.max(steps_per_interval$steps),]
missing_vals <- sum(is.na(rdata$steps))
na_fill <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
rdata_fill <- data.frame(
steps = na_fill(rdata, steps_per_interval),
date = rdata$date,
interval = rdata$interval)
str(rdata_fill)
sum(is.na(rdata_fill$steps))
fill_steps_per_day <- aggregate(steps ~ date, rdata_fill, sum)
colnames(fill_steps_per_day) <- c("date","steps")
##plotting the histogram
ggplot(fill_steps_per_day, aes(x = steps)) +
geom_histogram(fill = "blue", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
```
```{r}
steps_mean_fill   <- mean(fill_steps_per_day$steps, na.rm=TRUE)
steps_median_fill <- median(fill_steps_per_day$steps, na.rm=TRUE)
weekdays_steps <- function(data) {
weekdays_steps <- aggregate(data$steps, by=list(interval = data$interval),
FUN=mean, na.rm=T)
# convert to integers for plotting
weekdays_steps$interval <-
as.integer(levels(weekdays_steps$interval)[weekdays_steps$interval])
colnames(weekdays_steps) <- c("interval", "steps")
weekdays_steps
}
data_by_weekdays <- function(data) {
data$weekday <-
as.factor(weekdays(data$date)) # weekdays
weekend_data <- subset(data, weekday %in% c("Saturday","Sunday"))
weekday_data <- subset(data, !weekday %in% c("Saturday","Sunday"))
weekend_steps <- weekdays_steps(weekend_data)
weekday_steps <- weekdays_steps(weekday_data)
weekend_steps$dayofweek <- rep("weekend", nrow(weekend_steps))
weekday_steps$dayofweek <- rep("weekday", nrow(weekday_steps))
data_by_weekdays <- rbind(weekend_steps, weekday_steps)
data_by_weekdays$dayofweek <- as.factor(data_by_weekdays$dayofweek)
data_by_weekdays
}
data_weekdays <- data_by_weekdays(rdata_fill)
ggplot(data_weekdays, aes(x=interval, y=steps)) +
geom_line(color="violet") +
facet_wrap(~ dayofweek, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
rdata_fill
weekdays_steps <- function(data) {
weekdays_steps <- aggregate(data$steps, by=list(interval = data$interval),
FUN=mean, na.rm=T)
# convert to integers for plotting
weekdays_steps$interval <- as.integer(levels(weekdays_steps$interval)[weekdays_steps$interval])
colnames(weekdays_steps) <- c("interval", "steps")
weekdays_steps
}
data_by_weekdays <- function(data) {
data$weekday <- as.factor(weekdays(data$date)) # weekdays
weekend_data <- subset(data, weekday %in% c("Saturday","Sunday"))
weekday_data <- subset(data, !weekday %in% c("Saturday","Sunday"))
weekend_steps <- weekdays_steps(weekend_data)
weekday_steps <- weekdays_steps(weekday_data)
weekend_steps$dayofweek <- rep("weekend", nrow(weekend_steps))
weekday_steps$dayofweek <- rep("weekday", nrow(weekday_steps))
data_by_weekdays <- rbind(weekend_steps, weekday_steps)
data_by_weekdays$dayofweek <- as.factor(data_by_weekdays$dayofweek)
data_by_weekdays
}
data_weekdays <- data_by_weekdays(rdata_fill)
ggplot(data_weekdays, aes(x=interval, y=steps)) +
geom_line(color="violet") +
facet_wrap(~ dayofweek, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
weekdays_steps <- function(data) {
weekdays_steps <- aggregate(data$steps, by=list(interval = data$interval),FUN=mean, na.rm=T)
# convert to integers for plotting
weekdays_steps$interval <-
as.integer(levels(weekdays_steps$interval)[weekdays_steps$interval])
colnames(weekdays_steps) <- c("interval", "steps")
weekdays_steps
}
data_by_weekdays <- function(data) {
data$weekday <- as.factor(weekdays(data$date)) # weekdays
weekend_data <- subset(data, weekday %in% c("Saturday","Sunday"))
weekday_data <- subset(data, !weekday %in% c("Saturday","Sunday"))
weekend_steps <- weekdays_steps(weekend_data)
weekday_steps <- weekdays_steps(weekday_data)
weekend_steps$dayofweek <- rep("weekend", nrow(weekend_steps))
weekday_steps$dayofweek <- rep("weekday", nrow(weekday_steps))
data_by_weekdays <- rbind(weekend_steps, weekday_steps)
data_by_weekdays$dayofweek <- as.factor(data_by_weekdays$dayofweek)
data_by_weekdays
}
data_weekdays <- data_by_weekdays(rdata_fill)
rdata_fill$weekday
interval = rdata$interval)
str(rdata_fill)
```
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
sum(is.na(rdata_fill$steps))
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
setwd("C:/Users/6217473/Desktop/Coursera/RepData_PeerAssessment1-master")
data <- read.csv("activity.csv")
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
weekdays(as.)
weekdays(as.Date("2010-10-04"))
